From 96e1fd480d6bc31b8c2954b20477cac262d1f1e5 Mon Sep 17 00:00:00 2001
From: Damien George <damien.p.george@gmail.com>
Date: Fri, 17 Aug 2018 15:42:51 +1000
Subject: [PATCH 1/4] tests/basics/set_pop.py: Sort set before printing for
 consistent output.

---
 tests/basics/set_pop.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/basics/set_pop.py b/tests/basics/set_pop.py
index 5e1196c9f0..e951ca5931 100644
--- a/tests/basics/set_pop.py
+++ b/tests/basics/set_pop.py
@@ -15,4 +15,4 @@
     print(s.pop()) # last pop() should trigger the optimisation
 for i in range(N):
     s.add(i) # check that we can add the numbers back to the set
-print(list(s))
+print(sorted(s))

From 0988b14cd6d5fdbcc3fe3e65c6bdb6af1e906597 Mon Sep 17 00:00:00 2001
From: Damien George <damien.p.george@gmail.com>
Date: Fri, 17 Aug 2018 15:43:47 +1000
Subject: [PATCH 2/4] tests/basics/int_big_error.py: Use bytearray to test for
 int overflow.

In Python 3.7 "1 >> (big int)" is now allowed, it no longer raises an
OverflowError.  So use bytearray to test big-int conversion overflow.
---
 tests/basics/int_big_error.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/tests/basics/int_big_error.py b/tests/basics/int_big_error.py
index e036525d1b..79809aef11 100644
--- a/tests/basics/int_big_error.py
+++ b/tests/basics/int_big_error.py
@@ -17,9 +17,9 @@
 except TypeError:
     print("TypeError")
 
-# overflow because rhs of >> is being converted to machine int
+# overflow because arg of bytearray is being converted to machine int
 try:
-    1 >> i
+    bytearray(i)
 except OverflowError:
     print('OverflowError')
 

From 8979ce167101dec95c4cf994b3652debd6c8da6c Mon Sep 17 00:00:00 2001
From: Damien George <damien.p.george@gmail.com>
Date: Fri, 17 Aug 2018 15:46:04 +1000
Subject: [PATCH 3/4] tests: Modify tests that print repr of an exception with
 1 arg.

In Python 3.7 the behaviour of repr() of an exception with one argument
changed: it no longer prints a trailing comma in the argument list.  See
https://bugs.python.org/issue30399

This patch modifies tests that rely on this behaviour to not rely on it.
And the python34.py test is updated to include a test for this behaviour
with a .exp file.
---
 tests/basics/dict1.py            | 2 +-
 tests/basics/exception1.py       | 1 -
 tests/basics/generator_return.py | 2 +-
 tests/basics/python34.py         | 6 +++++-
 tests/basics/python34.py.exp     | 1 +
 tests/basics/subclass_native3.py | 4 ++--
 tests/basics/try_as_var.py       | 2 +-
 tests/misc/sys_exc_info.py       | 2 +-
 8 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/tests/basics/dict1.py b/tests/basics/dict1.py
index 20fa9def31..0cec51173a 100644
--- a/tests/basics/dict1.py
+++ b/tests/basics/dict1.py
@@ -27,7 +27,7 @@
 try:
     {}[0]
 except KeyError as er:
-    print('KeyError', er, repr(er), er.args)
+    print('KeyError', er, er.args)
 
 # unsupported unary op
 try:
diff --git a/tests/basics/exception1.py b/tests/basics/exception1.py
index 739dd32753..d83764cb93 100644
--- a/tests/basics/exception1.py
+++ b/tests/basics/exception1.py
@@ -1,7 +1,6 @@
 print(repr(IndexError()))
 print(str(IndexError()))
 
-print(repr(IndexError("foo")))
 print(str(IndexError("foo")))
 
 a = IndexError(1, "test", [100, 200])
diff --git a/tests/basics/generator_return.py b/tests/basics/generator_return.py
index a3ac88575e..5814ce8379 100644
--- a/tests/basics/generator_return.py
+++ b/tests/basics/generator_return.py
@@ -7,4 +7,4 @@ def gen():
 try:
     print(next(g))
 except StopIteration as e:
-    print(repr(e))
+    print(type(e), e.args)
diff --git a/tests/basics/python34.py b/tests/basics/python34.py
index 36531f11cf..4030db143c 100644
--- a/tests/basics/python34.py
+++ b/tests/basics/python34.py
@@ -1,4 +1,4 @@
-# tests that differ when running under Python 3.4 vs 3.5/3.6
+# tests that differ when running under Python 3.4 vs 3.5/3.6/3.7
 
 try:
     exec
@@ -36,3 +36,7 @@ def test_syntax(code):
 import sys
 print(sys.version[:3])
 print(sys.version_info[0], sys.version_info[1])
+
+# from basics/exception1.py
+# in 3.7 no comma is printed if there is only 1 arg (in 3.4-3.6 one is printed)
+print(repr(IndexError("foo")))
diff --git a/tests/basics/python34.py.exp b/tests/basics/python34.py.exp
index 590fc364f4..8480171307 100644
--- a/tests/basics/python34.py.exp
+++ b/tests/basics/python34.py.exp
@@ -11,3 +11,4 @@ SyntaxError
 SyntaxError
 3.4
 3 4
+IndexError('foo',)
diff --git a/tests/basics/subclass_native3.py b/tests/basics/subclass_native3.py
index bd99ab0d6a..6745b77bb2 100644
--- a/tests/basics/subclass_native3.py
+++ b/tests/basics/subclass_native3.py
@@ -7,12 +7,12 @@ class MyExc(Exception):
 print(e.args)
 
 try:
-    raise MyExc("Some error")
+    raise MyExc("Some error", 1)
 except MyExc as e:
     print("Caught exception:", repr(e))
 
 try:
-    raise MyExc("Some error2")
+    raise MyExc("Some error2", 2)
 except Exception as e:
     print("Caught exception:", repr(e))
 
diff --git a/tests/basics/try_as_var.py b/tests/basics/try_as_var.py
index 0a92f1caee..4f02f9c106 100644
--- a/tests/basics/try_as_var.py
+++ b/tests/basics/try_as_var.py
@@ -1,7 +1,7 @@
 try:
     raise ValueError(534)
 except ValueError as e:
-    print(repr(e))
+    print(type(e), e.args)
 
 # Var bound in except block is automatically deleted
 try:
diff --git a/tests/misc/sys_exc_info.py b/tests/misc/sys_exc_info.py
index 4bb2c61e89..bf9438e462 100644
--- a/tests/misc/sys_exc_info.py
+++ b/tests/misc/sys_exc_info.py
@@ -9,7 +9,7 @@ def f():
     print(sys.exc_info()[0:2])
 
 try:
-    1/0
+    raise ValueError('value', 123)
 except:
     print(sys.exc_info()[0:2])
     f()

From 828f771e327b932afc4865dbec53ce567dce45f5 Mon Sep 17 00:00:00 2001
From: Damien George <damien.p.george@gmail.com>
Date: Fri, 17 Aug 2018 15:50:21 +1000
Subject: [PATCH 4/4] tests/basics: Provide .exp files for generator tests that
 fail PEP479.

PEP479 (see https://www.python.org/dev/peps/pep-0479/) prohibited raising
StopIteration from within a generator (it is turned into a RuntimeError).
This behaviour was introduced in Python 3.5 and in 3.7 was made compulsory.
Until uPy implements PEP479, this patch adds .py.exp files for the relevant
tests so they can be run under Python 3.7.
---
 tests/basics/gen_yield_from.py.exp       | 14 ++++++++++++++
 tests/basics/gen_yield_from_close.py.exp | 20 ++++++++++++++++++++
 tests/basics/gen_yield_from_throw.py.exp |  6 ++++++
 tests/basics/generator_close.py.exp      | 10 ++++++++++
 4 files changed, 50 insertions(+)
 create mode 100644 tests/basics/gen_yield_from.py.exp
 create mode 100644 tests/basics/gen_yield_from_close.py.exp
 create mode 100644 tests/basics/gen_yield_from_throw.py.exp
 create mode 100644 tests/basics/generator_close.py.exp

diff --git a/tests/basics/gen_yield_from.py.exp b/tests/basics/gen_yield_from.py.exp
new file mode 100644
index 0000000000..507f2b9caf
--- /dev/null
+++ b/tests/basics/gen_yield_from.py.exp
@@ -0,0 +1,14 @@
+here1
+3
+here2
+[1, 2]
+here1
+None
+here2
+[1, 2]
+here1
+123
+here2
+[1, 2]
+444
+[0, 1, 2]
diff --git a/tests/basics/gen_yield_from_close.py.exp b/tests/basics/gen_yield_from_close.py.exp
new file mode 100644
index 0000000000..a44d1353df
--- /dev/null
+++ b/tests/basics/gen_yield_from_close.py.exp
@@ -0,0 +1,20 @@
+-1
+1
+StopIteration
+-1
+1
+2
+leaf caught GeneratorExit and swallowed it
+delegating caught GeneratorExit
+StopIteration
+-1
+1
+2
+leaf caught GeneratorExit and raised StopIteration instead
+delegating caught GeneratorExit
+StopIteration
+123
+RuntimeError
+0
+1
+close
diff --git a/tests/basics/gen_yield_from_throw.py.exp b/tests/basics/gen_yield_from_throw.py.exp
new file mode 100644
index 0000000000..6ce97ad86e
--- /dev/null
+++ b/tests/basics/gen_yield_from_throw.py.exp
@@ -0,0 +1,6 @@
+1
+got ValueError from upstream!
+str1
+got TypeError from downstream!
+123
+got StopIteration from downstream!
diff --git a/tests/basics/generator_close.py.exp b/tests/basics/generator_close.py.exp
new file mode 100644
index 0000000000..fcd5839357
--- /dev/null
+++ b/tests/basics/generator_close.py.exp
@@ -0,0 +1,10 @@
+None
+StopIteration
+1
+None
+StopIteration
+[1, 2]
+None
+StopIteration
+None
+ValueError
